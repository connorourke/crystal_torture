name: build

on: [push, pull_request]

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran
          
          # Verify Fortran compiler is working
          echo "=== Fortran compiler test ==="
          gfortran --version
          echo "program test; print *, 'Hello Fortran'; end program" > test.f90
          gfortran test.f90 -o test_fortran
          ./test_fortran
          rm test.f90 test_fortran

      - name: Install Python dependencies and package
        run: |
          python -m pip install --upgrade pip
          
          # Install with verbose output to see what meson-python is doing
          echo "=== Installing with verbose meson output ==="
          pip install .[dev] -v
          
          # Also try a manual meson build to see what happens
          echo "=== Manual meson build test ==="
          meson setup builddir --wipe || echo "Meson setup failed"
          if [ -d "builddir" ]; then
            echo "Meson build directory created successfully"
            ls -la builddir/
            meson compile -C builddir || echo "Meson compile failed"
            echo "=== Contents after manual build ==="
            find builddir/ -name "*.so" -o -name "*tort*" -o -name "*dist*" || echo "No extensions found after manual build"
            
            echo "=== Testing manual meson install ==="
            meson install -C builddir --dry-run --verbose || echo "Meson install dry-run failed"
            
            echo "=== Checking meson-python specific installation ==="
            # Copy the extensions manually to see if that fixes the issue
            if [ -f "builddir/_tort.cpython-311-x86_64-linux-gnu.so" ]; then
              echo "Copying extensions manually..."
              cp builddir/_tort.cpython-311-x86_64-linux-gnu.so crystal_torture/
              cp builddir/libdist.cpython-311-x86_64-linux-gnu.so crystal_torture/
              echo "Extensions copied. Re-testing imports..."
              python -c "
              from crystal_torture import tort, dist
              print('After manual copy:')
              print('tort_mod:', tort.tort_mod if hasattr(tort, 'tort_mod') else 'None')
              print('dist available:', getattr(dist, '_DIST_AVAILABLE', False))
              "
            fi
          fi
      
      - name: Debug Fortran extensions
        run: |
          echo "=== Checking for built extensions ==="
          find . -name "*.so" -o -name "*.dylib" | head -20
          
          echo "=== Checking build directory ==="
          ls -la build*/ 2>/dev/null || echo "No build directories found"
          find build*/ -name "*tort*" -o -name "*dist*" 2>/dev/null || echo "No tort/dist files in build"
          
          echo "=== Checking installed package location ==="
          python -c "
          import crystal_torture
          from pathlib import Path
          pkg_dir = Path(crystal_torture.__file__).parent
          print(f'Package installed at: {pkg_dir}')
          print('Files in installed package:')
          try:
            for f in sorted(pkg_dir.iterdir()):
              if f.is_file():
                size = f.stat().st_size
                print(f'  {f.name} ({size} bytes)')
          except Exception as e:
            print(f'Error listing files: {e}')
          
          # Check what ctypes is looking for
          print('\\n=== Testing ctypes loading ===')
          try:
            from crystal_torture import tort
            print(f'tort module: {tort}')
            if hasattr(tort, 'tort_mod'):
              print(f'tort_mod: {tort.tort_mod}')
          except Exception as e:
            print(f'tort import error: {e}')
            
          try:
            from crystal_torture import dist
            print(f'dist module: {dist}')  
            if hasattr(dist, '_DIST_AVAILABLE'):
              print(f'_DIST_AVAILABLE: {dist._DIST_AVAILABLE}')
          except Exception as e:
            print(f'dist import error: {e}')
          "
      
      - name: Run tests
        run: |
          pytest --cov-config=.coveragerc --cov=crystal_torture --cov-report=lcov tests/
      
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          file: ./coverage.lcov
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check package
        run: |
          twine check dist/*
