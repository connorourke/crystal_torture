name: build

on: [push, pull_request]

# =============================================================================
# CI CONFIGURATION NOTES
# =============================================================================
#
# This CI configuration has been optimized based on extensive debugging of
# meson-python packaging issues with Fortran extensions:
#
# PYTHON VERSION SUPPORT:
# - Python 3.11: ✅ Extensions build and package correctly in CI
# - Python 3.10/3.12/3.13: ❌ Extensions build but fail to package in CI
# - Local installs work on multiple Python versions (including 3.12)
# - Issue is specific to CI environment + meson-python interaction
#
# DEBUGGING REVEALED:
# - Extensions always build successfully (meson + gfortran work fine)
# - Packaging step fails silently on Python != 3.11 in CI
# - Same build configuration works locally across Python versions
# - Regular installs work better than editable installs
#
# CURRENT APPROACH:
# - CI tests only Python 3.11 (most reliable)
# - Package supports broader Python versions (users can try locally)
# - Future: Consider scikit-build + CMake for better CI compatibility
#
# =============================================================================

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        # Only Python 3.11 due to meson-python CI packaging issues
        # Other versions work locally but fail to package extensions in CI
        python-version: ['3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran
          
          # Verify Fortran compiler is working
          echo "=== Verifying Fortran compiler ==="
          gfortran --version
          echo "program test; print *, 'Fortran OK'; end program" > test.f90
          gfortran test.f90 -o test_fortran
          ./test_fortran
          rm test.f90 test_fortran

      - name: Install Python dependencies and package
        run: |
          python -m pip install --upgrade pip
          # Use regular install (not editable) due to meson-python issues
          pip install .[dev]
      
      - name: Verify Fortran extensions loaded correctly
        run: |
          python -c "
          import crystal_torture
          print(f'✅ Crystal Torture {crystal_torture.__version__}')
          
          # Verify Fortran extensions are working
          from crystal_torture import tort, dist
          assert tort.tort_mod is not None, 'Fortran tort module should be available'
          assert dist._DIST_AVAILABLE == True, 'Fortran dist module should be available'
          print('✅ Fortran extensions loaded successfully')
          
          # Test basic functionality
          from crystal_torture import Node, Cluster, Graph
          print('✅ All imports successful')
          "
      
      - name: Run tests
        run: |
          pytest --cov-config=.coveragerc --cov=crystal_torture --cov-report=lcov tests/
      
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          file: ./coverage.lcov
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # Use Python 3.11 for package building (most reliable with meson-python)
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check package
        run: |
          twine check dist/*
          
      - name: Verify built package contains extensions
        run: |
          # Extract and check wheel contents to ensure Fortran extensions are included
          python -c "
          import zipfile
          import glob
          
          wheels = glob.glob('dist/*.whl')
          if wheels:
              with zipfile.ZipFile(wheels[0], 'r') as z:
                  files = z.namelist()
                  so_files = [f for f in files if f.endswith('.so') and ('tort' in f or 'dist' in f)]
                  print(f'Extensions found in wheel: {so_files}')
                  assert len(so_files) >= 2, f'Expected at least 2 extensions, found: {so_files}'
                  print('✅ Package contains Fortran extensions')
          else:
              print('❌ No wheel files found')
              exit(1)
          "
