name: build-and-test

on: [push, pull_request]

jobs:
  test-full-functionality:
    # Test full Fortran functionality across Python versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran build-essential
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel build meson ninja numpy meson-python pytest pytest-cov
      
      - name: Build and install package
        run: |
          echo "=== Building package ==="
          python -m build
          
          echo "=== Installing from wheel ==="
          pip install dist/*.whl
      
      - name: Test Fortran extensions
        run: |
          echo "=== Testing Fortran extensions on Python ${{ matrix.python-version }} ==="
          # Test from outside source directory
          cd /tmp
          
          python -c "
          import crystal_torture
          print(f'✅ Crystal Torture {crystal_torture.__version__} on Python ${{ matrix.python-version }}')
          
          from crystal_torture import tort, dist
          
          # Test tort functionality
          if tort.tort_mod is not None:
              tort.tort_mod.allocate_nodes(10, 5)
              tort.tort_mod.tear_down()
              print('✅ Fortran tort module working')
          else:
              raise ImportError('tort.tort_mod is None')
              
          # Test dist functionality  
          if dist._DIST_AVAILABLE:
              import numpy as np
              coords = np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]], dtype=np.float32)
              result = dist.dist(coords, coords, 2)
              print(f'✅ Fortran dist module working: {result.shape}')
          else:
              raise ImportError('dist module not available')
              
          print('🚀 All Fortran extensions working perfectly!')
          "
      
      - name: Run unit tests
        run: |
          # Run tests from outside source directory to use installed package
          cd /tmp
          python -m pytest /home/runner/work/crystal_torture/crystal_torture/tests/ -v
      
      - name: Test scientific functionality
        run: |
          # Test actual scientific use case
          cd /tmp
          python -c "
          # Test that we can actually do science with this package
          from crystal_torture import Node, Cluster
          from crystal_torture.pymatgen_interface import clusters_from_structure
          import tempfile
          import os
          
          print('Testing scientific functionality...')
          
          # Test Node and Cluster creation
          node1 = Node(0, 'Li', {'UC_index': '0', 'Halo': False}, [1])
          node2 = Node(1, 'Li', {'UC_index': '0', 'Halo': True}, [0])
          
          for node in [node1, node2]:
              node.neighbours = set([node1, node2][j] for j in node.neighbours_ind)
          
          cluster = Cluster({node1, node2})
          
          # Test both Fortran and Python torture methods
          cluster.torture_py()
          print('✅ Python torture method working')
          
          try:
              cluster.torture_fort()  
              print('✅ Fortran torture method working')
          except Exception as e:
              print(f'⚠️  Fortran torture issue: {e}')
          
          print('🔬 Scientific functionality verified!')
          "

  test-documentation-examples:
    # Test that examples in documentation actually work
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gfortran
          pip install build
      
      - name: Install package
        run: |
          python -m build
          pip install dist/*.whl
      
      - name: Test installation verification code
        run: |
          # Test the verification code from our documentation
          cd /tmp
          python -c "
          import crystal_torture
          print(f'Crystal Torture version: {crystal_torture.__version__}')

          # Test Fortran extensions
          from crystal_torture import tort, dist
          if tort.tort_mod is not None:
              print('✅ Fortran tort module available')
          else:
              print('ℹ️  Using Python tort fallback')

          if dist._DIST_AVAILABLE:
              print('✅ Fortran dist module available')  
          else:
              print('ℹ️  Using Python dist fallback')
          "

  build-wheels:
    # Build wheels for distribution
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install build dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gfortran
          pip install build
      
      - name: Build wheels
        run: |
          python -m build
          
          # Verify the wheel contains extensions
          python -c "
          import zipfile, glob
          wheel = glob.glob('dist/*.whl')[0]
          with zipfile.ZipFile(wheel, 'r') as z:
              files = z.namelist()
              so_files = [f for f in files if f.endswith('.so')]
              print(f'Wheel contains extensions: {so_files}')
              assert len(so_files) >= 2, 'Missing extensions in wheel'
          "
      
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-python-${{ matrix.python-version }}
          path: dist/*.whl
