name: build

on: [push, pull_request]

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coveralls
          
      - name: Test normal user installation (no dev dependencies)
        run: |
          echo "=== This is what a normal user would run ==="
          pip install . -v
          
      - name: Verify real user installation works
        run: |
          python -c "
          import crystal_torture
          print(f'Crystal Torture version: {crystal_torture.__version__}')
          
          # Test Fortran extensions work
          try:
              from crystal_torture import tort
              print(f'SUCCESS: tort.tort_mod = {tort.tort_mod}')
              print('✓ Fortran tort module working')
          except Exception as e:
              print(f'❌ tort import error: {e}')
          
          try:
              from crystal_torture import dist  
              print(f'SUCCESS: dist._DIST_AVAILABLE = {getattr(dist, \"_DIST_AVAILABLE\", \"Not found\")}')
              print('✓ Fortran dist module working')
          except Exception as e:
              print(f'❌ dist import error: {e}')
          "
          
          # Test basic functionality
          python -c "from crystal_torture import Node, Cluster, Graph; print('✓ Basic imports work')"

      - name: Debug extension files
        run: |
          python -c "
          import crystal_torture
          from pathlib import Path
          pkg_dir = Path(crystal_torture.__file__).parent
          print('Package directory:', pkg_dir)
          print('All files in package:')
          for f in sorted(pkg_dir.iterdir()):
              if f.is_file():
                  print(f'  {f.name} ({f.stat().st_size} bytes)')
          print()
          print('Searching for extensions:')
          for pattern in ['_tort*', 'libdist*', '*.so', '*.pyd']:
              matches = list(pkg_dir.glob(pattern))
              print(f'  {pattern}: {[f.name for f in matches]}')
          "

      - name: Debug pip installation process  
        run: |
          echo "=== Try a fresh pip install ==="
          pip uninstall crystal-torture -y
          pip install -e . -vvv 2>&1 | tail -50
          
          echo "=== Check installed package ==="
          python -c "
          import crystal_torture
          from pathlib import Path
          pkg_dir = Path(crystal_torture.__file__).parent
          print(f'Package directory: {pkg_dir}')
          all_files = list(pkg_dir.rglob('*'))
          for f in sorted(all_files):
              if f.is_file():
                  print(f'  {f.relative_to(pkg_dir)} ({f.stat().st_size} bytes)')
          "
          
          echo "=== Look for build artifacts ==="
          ls -la build* 2>/dev/null || echo "No build directories found"
          find . -name "*.so" -type f 2>/dev/null || echo "No .so files found in project"
      
      - name: Verify installation
        run: |
          python -c "import crystal_torture; print(f'Crystal Torture version: {crystal_torture.__version__}')"
          python -c "from crystal_torture import Node, Cluster, Graph; print('Import successful')"
      
      - name: Run tests
        run: |
          pytest --cov-config=.coveragerc --cov=crystal_torture --cov-report=lcov tests/
      
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          file: ./coverage.lcov
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check package
        run: |
          twine check dist/*
